[{"C:\\DEV\\vegan-way\\client\\src\\index.js":"1","C:\\DEV\\vegan-way\\client\\src\\reportWebVitals.js":"2","C:\\DEV\\vegan-way\\client\\src\\App.jsx":"3","C:\\DEV\\vegan-way\\client\\src\\routes.jsx":"4","C:\\DEV\\vegan-way\\client\\src\\pages\\MainPage\\MainPage.jsx":"5","C:\\DEV\\vegan-way\\client\\src\\pages\\MapPage\\MapPage.jsx":"6","C:\\DEV\\vegan-way\\client\\src\\pages\\FavoritePage\\FavoritePage.jsx":"7","C:\\DEV\\vegan-way\\client\\src\\pages\\AuthPage\\AuthPage.jsx":"8","C:\\DEV\\vegan-way\\client\\src\\hooks\\auth.hooks.jsx":"9","C:\\DEV\\vegan-way\\client\\src\\context\\AuthContext.jsx":"10","C:\\DEV\\vegan-way\\client\\src\\hooks\\http.hooks.jsx":"11","C:\\DEV\\vegan-way\\client\\src\\components\\Layout.jsx":"12","C:\\DEV\\vegan-way\\client\\src\\components\\navbar.jsx":"13","C:\\DEV\\vegan-way\\client\\src\\hooks\\massege.hooks.jsx":"14","C:\\DEV\\vegan-way\\client\\src\\pages\\MapPage\\Map.jsx":"15","C:\\DEV\\vegan-way\\client\\src\\pages\\MainPage\\NearMap.jsx":"16"},{"size":176,"mtime":1608546295036,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1607159173912,"results":"19","hashOfConfig":"20"},{"size":919,"mtime":1610401832971,"results":"21","hashOfConfig":"18"},{"size":1233,"mtime":1610399977038,"results":"22","hashOfConfig":"18"},{"size":254,"mtime":1609180304408,"results":"23","hashOfConfig":"18"},{"size":241,"mtime":1609178791720,"results":"24","hashOfConfig":"18"},{"size":139,"mtime":1608546295039,"results":"25","hashOfConfig":"18"},{"size":3116,"mtime":1608547140751,"results":"26","hashOfConfig":"18"},{"size":761,"mtime":1608547140746,"results":"27","hashOfConfig":"18"},{"size":205,"mtime":1608559515868,"results":"28","hashOfConfig":"18"},{"size":794,"mtime":1608547140746,"results":"29","hashOfConfig":"18"},{"size":466,"mtime":1608547140743,"results":"30","hashOfConfig":"18"},{"size":1326,"mtime":1610408474177,"results":"31","hashOfConfig":"18"},{"size":437,"mtime":1608559515868,"results":"32","hashOfConfig":"18"},{"size":4376,"mtime":1610383390357,"results":"33","hashOfConfig":"18"},{"size":5770,"mtime":1610380008012,"results":"34","hashOfConfig":"18"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1bun9og",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mp9o3n",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},"C:\\DEV\\vegan-way\\client\\src\\index.js",[],["71","72"],"C:\\DEV\\vegan-way\\client\\src\\reportWebVitals.js",[],"C:\\DEV\\vegan-way\\client\\src\\App.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\routes.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\pages\\MainPage\\MainPage.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\pages\\MapPage\\MapPage.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\pages\\FavoritePage\\FavoritePage.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\pages\\AuthPage\\AuthPage.jsx",["73"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport './AuthPage.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { useHttp } from '../../hooks/http.hooks';\r\nimport { useMessage } from '../../hooks/massege.hooks';\r\nimport { AuthContext } from '../../context/AuthContext';\r\n\r\nexport const AuthPage = () => {\r\n  const [form, setForm] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const auth = useContext(AuthContext);\r\n  const message = useMessage();\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  useEffect(() => {\r\n    message(error);\r\n    clearError();\r\n  }, [error, message, clearError]);\r\n\r\n  const changeHandler = ({ target }) => {\r\n    setForm({ ...form, [target.name]: target.value });\r\n  };\r\n\r\n  const registerHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/register', 'POST', { ...form });\r\n      message(data.message);\r\n      auth.login(data.token, data.userId);\r\n    } catch (e) {}\r\n  };\r\n  const loginHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/login', 'POST', { ...form });\r\n      auth.login(data.token, data.userId);\r\n    } catch (e) {}\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-wrapper\">\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-form\"\r\n        initialValues={{\r\n          remember: true,\r\n        }}\r\n        // onFinish={onFinish}\r\n      >\r\n        <h1>Vegan Way</h1>\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Пожалуйста, введите свой Email!',\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"Email\"\r\n            name=\"email\"\r\n            onChange={changeHandler}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Пожалуйста, введите свой пароль!',\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Пароль\"\r\n            name=\"password\"\r\n            onChange={changeHandler}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            onClick={registerHandler}\r\n            disabled={loading}\r\n          >\r\n            Зарегистрироваться\r\n          </Button>\r\n          <Button\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            onClick={loginHandler}\r\n            disabled={loading}\r\n          >\r\n            Войти под своим именем\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","C:\\DEV\\vegan-way\\client\\src\\hooks\\auth.hooks.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\context\\AuthContext.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\hooks\\http.hooks.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\components\\Layout.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\components\\navbar.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\hooks\\massege.hooks.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\pages\\MapPage\\Map.jsx",[],"C:\\DEV\\vegan-way\\client\\src\\pages\\MainPage\\NearMap.jsx",["74"],"import React, { useEffect } from 'react';\r\nimport { compose, withProps, withState, withHandlers } from 'recompose';\r\nimport { Rate, Divider } from 'antd';\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  InfoWindow,\r\n  DirectionsRenderer,\r\n} from 'react-google-maps';\r\nimport markerIcon from '../../icons/broccoli/broccoli.png';\r\nimport myMarkerIcon from '../../icons/crown/crown.png';\r\nimport './NearMap.css';\r\nrequire('dotenv').config();\r\n\r\nexport const NearMap = compose(\r\n  withProps({\r\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=\r\n      ${process.env.REACT_APP_API_KEY}&libraries=geometry,drawing,places`,\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div style={{ height: `100%` }} />,\r\n    mapElement: <div style={{ height: `100%` }} />,\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  withState('nearPlace', 'updateNearPlace'),\r\n  withState('bestPlace', 'updateBestPlace'),\r\n  withState('selectedPlace', 'updateSelectedPlace', null),\r\n  withState('position', 'setPosition'),\r\n  withState('direction', 'setDirection'),\r\n  withHandlers(() => {\r\n    const refs = {\r\n      map: undefined,\r\n    };\r\n\r\n    return {\r\n      onMapMounted: () => (ref) => {\r\n        refs.map = ref;\r\n      },\r\n      fetchPlaces: ({\r\n        updateNearPlace,\r\n        position,\r\n        nearPlace,\r\n        setDirection,\r\n      }) => () => {\r\n        const service = new window.google.maps.places.PlacesService(\r\n          refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\r\n        );\r\n\r\n        const request = {\r\n          location: position,\r\n          keyword: ['вегетарианский', 'вег', 'vegeterian'],\r\n          type: ['establishment', 'food', 'cafe', 'restaurant'],\r\n          rankBy: window.google.maps.places.RankBy.DISTANCE,\r\n        };\r\n\r\n        service.nearbySearch(request, (results, status) => {\r\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n            updateNearPlace(results[0]);\r\n          }\r\n        });\r\n\r\n        if (nearPlace) {\r\n          const DirectionsService = new window.google.maps.DirectionsService();\r\n\r\n          DirectionsService.route(\r\n            {\r\n              origin: position,\r\n              destination: {\r\n                lat: nearPlace.geometry.location.lat(),\r\n                lng: nearPlace.geometry.location.lng(),\r\n              },\r\n              travelMode: window.google.maps.TravelMode.WALKING,\r\n            },\r\n            (result, status) => {\r\n              if (status === window.google.maps.DirectionsStatus.OK) {\r\n                setDirection(result);\r\n              } else {\r\n                console.error(`error fetching directions ${result}`);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      },\r\n      onToggleOpen: ({ updateSelectedPlace }) => (key) => {\r\n        updateSelectedPlace(key);\r\n      },\r\n    };\r\n  })\r\n)((props) => {\r\n  const [position, setPosition] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      ({ coords }) => {\r\n        setPosition({ lat: coords.latitude, lng: coords.longitude });\r\n        props.setPosition({ lat: coords.latitude, lng: coords.longitude });\r\n        // setPosition({ lat: 47.222515, lng: 39.717362 });\r\n        // props.setPosition({ lat: 47.222521, lng: 39.717362 });\r\n      },\r\n      (error) => console.log(error.message),\r\n      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    position && (\r\n      <GoogleMap\r\n        defaultZoom={18}\r\n        defaultCenter={position}\r\n        onTilesLoaded={props.fetchPlaces}\r\n        ref={props.onMapMounted}\r\n        onBoundsChanged={props.fetchPlaces}\r\n      >\r\n        {props.direction && (\r\n          <DirectionsRenderer\r\n            directions={props.direction}\r\n            options={{ suppressMarkers: true, preserveViewport: true }}\r\n          />\r\n        )}\r\n        {props.isMarkerShown && (\r\n          <>\r\n            <Marker\r\n              position={position}\r\n              onClick={props.onMarkerClick}\r\n              icon={{ url: myMarkerIcon }}\r\n              title=\"Это я, такой весь голодный( Брр....\"\r\n            />\r\n            {props.nearPlace && (\r\n              <Marker\r\n                position={props.nearPlace.geometry.location}\r\n                onClick={() => props.onToggleOpen(props.nearPlace.place_id)}\r\n                icon={{ url: markerIcon }}\r\n                title={`${props.nearPlace.name}, Рейтинг: ${props.nearPlace.rating}`}\r\n              >\r\n                {props.selectedPlace === props.nearPlace.place_id && (\r\n                  <InfoWindow\r\n                    onCloseClick={() => props.onToggleOpen()}\r\n                    className={'InfoWindow'}\r\n                    // options={{ maxWidth: 200 }}\r\n                  >\r\n                    <>\r\n                      <Divider className=\"cardTitle\">\r\n                        {props.nearPlace.name}\r\n                      </Divider>\r\n                      <Rate disabled defaultValue={props.nearPlace.rating} />\r\n                      <div className=\"cardDescription\">{`Адрес: ${props.nearPlace.vicinity}`}</div>\r\n                      {props.nearPlace.photos &&\r\n                        props.nearPlace.photos.length && (\r\n                          <img\r\n                            className={'previewImage'}\r\n                            src={props.nearPlace.photos[0].getUrl()}\r\n                            alt=\"text\"\r\n                          />\r\n                        )}\r\n                    </>\r\n                  </InfoWindow>\r\n                )}\r\n              </Marker>\r\n            )}\r\n          </>\r\n        )}\r\n      </GoogleMap>\r\n    )\r\n  );\r\n});\r\n",["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":4,"column":31,"nodeType":"83","messageId":"84","endLine":4,"endColumn":39},{"ruleId":"85","severity":1,"message":"86","line":105,"column":6,"nodeType":"87","endLine":105,"endColumn":8,"suggestions":"88"},{"ruleId":"77","replacedBy":"89"},{"ruleId":"79","replacedBy":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["93"],["91"],["92"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [props]",{"range":"96","text":"97"},[3475,3477],"[props]"]